/*
 * Created on 17 oct. 2016 ( Time 17:15:02 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
// This Bean has a basic Primary Key (not composite)

package fr.lidadi.jee.eventmanager.app.event;

import fr.lidadi.jee.eventmanager.app.slug.Slug;
import fr.lidadi.jee.eventmanager.framework.dao.Entity;
import fr.lidadi.jee.eventmanager.app.participant.Participant;
import fr.lidadi.jee.eventmanager.app.person.Person;

//import javax.validation.constraints.* ;
//import org.hibernate.validator.constraints.* ;

import java.util.Date;
import java.util.List;
import java.util.UUID;

import javax.persistence.*;

/**
 * Persistent class for entity stored in table "EVENT"
 *
 * @author Telosys Tools Generator
 */


@javax.persistence.Entity(name = "event")
public class Event implements Entity {


    //----------------------------------------------------------------------
    // ENTITY PRIMARY KEY ( BASED ON A SINGLE FIELD )
    //----------------------------------------------------------------------
    @Id
    @Column(name = "ID", nullable = false)
    private UUID id;


    //----------------------------------------------------------------------
    // ENTITY DATA FIELDS
    //----------------------------------------------------------------------

    @Column(name = "NAME", nullable = false, length = 255)
    private String name;

    @Column(name = "DESCRIPTION", columnDefinition = "text")
    private String description;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "START_DATE")
    private Date startDate;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "END_DATE")
    private Date endDate;

    @Temporal(TemporalType.DATE)
    @Column(name = "PUBLISHING_DATE")
    private Date publishingDate;

    @Column(name = "LOCATION", length = 255)
    private String location;

    @Temporal(TemporalType.DATE)
    @Column(name = "UPDATED", nullable = false)
    private Date updated;

    @Temporal(TemporalType.DATE)
    @Column(name = "CREATED", nullable = false)
    private Date created;

//
//    @OneToMany(mappedBy = "event", targetEntity = Slug.class)
//    private String slug;

    @Column(name = "slug", nullable = false, unique = true)
    private String slug;

    @OneToMany(mappedBy = "event", targetEntity = Participant.class)
    private List<Participant> participants;

    @ManyToMany(targetEntity = Person.class)
    @JoinTable(name = "EVENT_PERSON_OWNER",
            joinColumns = @JoinColumn(name = "EVENT_ID", referencedColumnName = "ID"),
            inverseJoinColumns = @JoinColumn(name = "PERSON_ID", referencedColumnName = "ID")
    )
    private List<Person> registeredPersons;

    @ManyToMany(targetEntity = Person.class)
    @JoinTable(name = "EVENT_PERSON_OWNER",
            joinColumns = @JoinColumn(name = "EVENT_ID", referencedColumnName = "ID"),
            inverseJoinColumns = @JoinColumn(name = "PERSON_ID", referencedColumnName = "ID")
    )
    private List<Person> owners;


    //----------------------------------------------------------------------
    // CONSTRUCTOR(S)
    //----------------------------------------------------------------------
    public Event() {
        super();
    }

    public Event(UUID id, String name, String description, Date startDate, Date endDate, Date publishingDate, String location, Date updated, Date created, List<Person> owners, String slug, List<Participant> participants, List<Person> registeredPersons) {
        this.id = id;
        this.name = name;
        this.description = description;
        this.startDate = startDate;
        this.endDate = endDate;
        this.publishingDate = publishingDate;
        this.location = location;
        this.updated = updated;
        this.created = created;
        this.owners = owners;
        this.slug = slug;
        this.participants = participants;
        this.registeredPersons = registeredPersons;
    }

    public UUID getId() {
        return this.id;
    }

    //----------------------------------------------------------------------
    // GETTER & SETTER FOR THE KEY FIELD
    //----------------------------------------------------------------------
    public void setId(UUID id) {
        this.id = UUID.fromString(id.toString());
    }

    public String getName() {
        return this.name;
    }

    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR FIELDS
    //----------------------------------------------------------------------
    //--- DATABASE MAPPING : NAME ( VARCHAR )
    public void setName(String name) {
        this.name = name;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public String getDescription() {
        return description;
    }

    //--- DATABASE MAPPING : START_DATE ( TIMESTAMP )
    public Date getStartDate() {
        return this.startDate;
    }

    //--- DATABASE MAPPING : START_DATE ( TIMESTAMP )
    public void setStartDate(Date startDate) {
        this.startDate = startDate;
    }

    public Date getEndDate() {
        return this.endDate;
    }

    //--- DATABASE MAPPING : END_DATE ( TIMESTAMP )
    public void setEndDate(Date endDate) {
        this.endDate = endDate;
    }

    public Date getPublishingDate() {
        return this.publishingDate;
    }

    //--- DATABASE MAPPING : PUBLISHING_DATE ( DATE )
    public void setPublishingDate(Date publishingDate) {
        this.publishingDate = publishingDate;
    }

    public String getLocation() {
        return this.location;
    }

    //--- DATABASE MAPPING : LOCATION ( VARCHAR )
    public void setLocation(String location) {
        this.location = location;
    }

    public Date getUpdated() {
        return this.updated;
    }

    //--- DATABASE MAPPING : UPDATED ( DATE )
    public void setUpdated(Date updated) {
        this.updated = updated;
    }

    public Date getCreated() {
        return this.created;
    }

    //--- DATABASE MAPPING : CREATED ( DATE )
    public void setCreated(Date created) {
        this.created = created;
    }

    public String getSlug() {
        return this.slug;
    }

    public void setSlug(String slug) {
        this.slug = slug;
    }

    public List<Participant> getParticipants() {
        return this.participants;
    }

    public void setParticipants(List<Participant> participants) {
        this.participants = participants;
    }

    public List<Person> getRegisteredPersons() {
        return this.registeredPersons;
    }

    public void setRegisteredPersons(List<Person> registeredPersons) {
        this.registeredPersons = registeredPersons;
    }

    //----------------------------------------------------------------------
    // Get primary key
    //----------------------------------------------------------------------
    @Override
    public Object getPrimaryKey() {
        return getId();
    }

    //----------------------------------------------------------------------
    // toString METHOD
    //----------------------------------------------------------------------
    public String toString() {
        StringBuffer sb = new StringBuffer();
        sb.append("[");
        // attribute 'id' not usable (type = UUID)
        sb.append("]:");
        sb.append(name);
        sb.append("|");
        sb.append(startDate);
        sb.append("|");
        sb.append(endDate);
        sb.append("|");
        sb.append(publishingDate);
        sb.append("|");
        sb.append(location);
        sb.append("|");
        sb.append(updated);
        sb.append("|");
        sb.append(created);
        return sb.toString();
    }

    public List<Person> getOwners() {
        return owners;
    }

    public void setOwners(List<Person> owners) {
        this.owners = owners;
    }
}
