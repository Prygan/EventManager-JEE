/*
 * Created on 17 oct. 2016 ( Time 17:17:31 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
// This Bean has a composite Primary Key


package fr.lidadi.jee.eventmanager.app.participant;

import fr.lidadi.jee.eventmanager.app.event.EventEntity;

import java.io.Serializable;
import java.util.UUID;

//import javax.validation.constraints.* ;
//import org.hibernate.validator.constraints.* ;


import javax.persistence.*;
import javax.persistence.Entity;

/**
 * Persistent class for entity stored in table "PARTICIPANT"
 *
 * @author Telosys Tools Generator
 *
 */

@Entity(name="participant")
// Define named queries here
@NamedQueries ( {
  @NamedQuery ( name="ParticipantEntity.findAll", query="SELECT x FROM participant x" )
} )
public class ParticipantEntity implements fr.lidadi.jee.eventmanager.dao.Entity {


    //----------------------------------------------------------------------
    // ENTITY PRIMARY KEY ( EMBEDDED IN AN EXTERNAL CLASS )
    //----------------------------------------------------------------------
	@EmbeddedId
    private ParticipantEntityKey compositePrimaryKey ;


    //----------------------------------------------------------------------
    // ENTITY DATA FIELDS
    //----------------------------------------------------------------------
    @Column(name="FIRST_NAME", length=255)
    private String     firstName    ;

    @Column(name="LAST_NAME", length=255)
    private String     lastName     ;

    @Column(name="COMPANY", length=255)
    private String     company      ;



    //----------------------------------------------------------------------
    // ENTITY LINKS ( RELATIONSHIP )
    //----------------------------------------------------------------------
    @ManyToOne
    @JoinColumn(name="EVENT_ID", referencedColumnName="ID", insertable=false, updatable=false)
    private EventEntity event       ;


    //----------------------------------------------------------------------
    // CONSTRUCTOR(S)
    //----------------------------------------------------------------------
    public ParticipantEntity() {
		super();
		this.compositePrimaryKey = new ParticipantEntityKey();
    }

    //----------------------------------------------------------------------
    // GETTER & SETTER FOR THE COMPOSITE KEY
    //----------------------------------------------------------------------
    public void setEventId( UUID eventId ) {
        this.compositePrimaryKey.setEventId( eventId ) ;
    }
    public UUID getEventId() {
        return this.compositePrimaryKey.getEventId() ;
    }
    public void setMail( String mail ) {
        this.compositePrimaryKey.setMail( mail ) ;
    }
    public String getMail() {
        return this.compositePrimaryKey.getMail() ;
    }


    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR FIELDS
    //----------------------------------------------------------------------
    //--- DATABASE MAPPING : FIRST_NAME ( VARCHAR )
    public void setFirstName( String firstName ) {
        this.firstName = firstName;
    }
    public String getFirstName() {
        return this.firstName;
    }

    //--- DATABASE MAPPING : LAST_NAME ( VARCHAR )
    public void setLastName( String lastName ) {
        this.lastName = lastName;
    }
    public String getLastName() {
        return this.lastName;
    }

    //--- DATABASE MAPPING : COMPANY ( VARCHAR )
    public void setCompany( String company ) {
        this.company = company;
    }
    public String getCompany() {
        return this.company;
    }


    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR LINKS
    //----------------------------------------------------------------------
    public void setEvent( EventEntity event ) {
        this.event = event;
    }
    public EventEntity getEvent() {
        return this.event;
    }


    //----------------------------------------------------------------------
    // toString METHOD
    //----------------------------------------------------------------------
    public String toString() {
        StringBuffer sb = new StringBuffer();
        sb.append("[");
        if ( compositePrimaryKey != null ) {
            sb.append(compositePrimaryKey.toString());
        }
        else {
            sb.append( "(null-key)" );
        }
        sb.append("]:");
        sb.append(firstName);
        sb.append("|");
        sb.append(lastName);
        sb.append("|");
        sb.append(company);
        return sb.toString();
    }

    @Override
    public Object getPrimaryKey() {
        return compositePrimaryKey;
    }



    @Embeddable
    public class ParticipantEntityKey implements Serializable {
        private static final long serialVersionUID = 1L;

        // ----------------------------------------------------------------------
        // ENTITY KEY ATTRIBUTES
        // ----------------------------------------------------------------------
        @Lob
        @Column(name = "EVENT_ID", nullable = false)
        private UUID eventId;

        @Column(name = "MAIL", nullable = false, length = 255)
        private String mail;

        // ----------------------------------------------------------------------
        // CONSTRUCTORS
        // ----------------------------------------------------------------------
        public ParticipantEntityKey() {
            super();
        }

        public ParticipantEntityKey(UUID eventId, String mail) {
            super();
            this.eventId = eventId;
            this.mail = mail;
        }

        // ----------------------------------------------------------------------
        // GETTERS & SETTERS FOR KEY FIELDS
        // ----------------------------------------------------------------------
        public void setEventId(UUID value) {
            this.eventId = value;
        }

        public UUID getEventId() {
            return this.eventId;
        }

        public void setMail(String value) {
            this.mail = value;
        }

        public String getMail() {
            return this.mail;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            ParticipantEntityKey that = (ParticipantEntityKey) o;

            if (getEventId() != null ? !getEventId().equals(that.getEventId()) : that.getEventId() != null)
                return false;
            return getMail() != null ? getMail().equals(that.getMail()) : that.getMail() == null;

        }

        @Override
        public int hashCode() {
            int result = getEventId() != null ? getEventId().hashCode() : 0;
            result = 31 * result + (getMail() != null ? getMail().hashCode() : 0);
            return result;
        }
    }
}
